// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Board from "./Board.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as $$Promise from "@ryyppy/rescript-promise/src/Promise.bs.js";
import * as Notation from "./Notation.bs.js";

import './App.css'
;

var $$Response = {};

function App(Props) {
  var match = React.useState(function () {
        return false;
      });
  var setIsLoaded = match[1];
  var isLoaded = match[0];
  var match$1 = React.useState(function () {
        return [];
      });
  var setNodes = match$1[1];
  var match$2 = React.useState(function () {
        return [];
      });
  var setLines = match$2[1];
  var match$3 = React.useState(function () {
        return [];
      });
  var setInReview = match$3[1];
  var in_review = match$3[0];
  var match$4 = React.useState(function () {
        return 0;
      });
  var setC = match$4[1];
  var c = match$4[0];
  var match$5 = React.useState(function () {
        return [];
      });
  var setTransitions = match$5[1];
  React.useEffect(function () {
        var fetchData = function (param) {
          var params = {
            method: "GET"
          };
          $$Promise.$$catch(fetch("http://localhost:8080", params).then(function (res) {
                      return res.json();
                    }).then(function (data) {
                    Curry._1(setIsLoaded, (function (param) {
                            return true;
                          }));
                    Curry._1(setNodes, (function (param) {
                            return data.nodes;
                          }));
                    Curry._1(setTransitions, (function (param) {
                            return data.transitions;
                          }));
                    var shouldReview = function (line) {
                      return line[0].repetition.last_seen === -1;
                    };
                    var attach_idx = function (line, index) {
                      return [
                              line,
                              index
                            ];
                    };
                    Curry._1(setLines, (function (param) {
                            return data.lines;
                          }));
                    console.log(data.lines);
                    Curry._1(setInReview, (function (param) {
                            return data.lines.map(attach_idx).filter(shouldReview);
                          }));
                    return Promise.resolve({
                                TAG: /* Ok */0,
                                _0: data
                              });
                  }), (function (e) {
                  var msg;
                  if (e.RE_EXN_ID === $$Promise.JsError) {
                    var msg$1 = e._1.message;
                    msg = msg$1 !== undefined ? msg$1 : "";
                  } else {
                    msg = "Unexpected error occurred";
                  }
                  return Promise.resolve({
                              TAG: /* Error */1,
                              _0: msg
                            });
                }));
        };
        if (!isLoaded) {
          fetchData(undefined);
        }
        
      });
  if (in_review.length <= 0) {
    return React.createElement("div", undefined, "Waiting for the data to load....");
  }
  if (c >= in_review.length) {
    return React.createElement("div", undefined, React.createElement(Notation.make, {
                    comment: "Please make moves for both sides, whether the move is correct or not will be indicated by the outer border of the board."
                  }), React.createElement("div", undefined, "Finished all lines"));
  }
  var onClick = function (evt) {
    evt.preventDefault();
    Curry._1(setC, (function (c) {
            return c + 1 | 0;
          }));
  };
  return React.createElement("div", undefined, React.createElement(Notation.make, {
                  comment: "Please make moves for both sides, whether the move is correct or not will be indicated by the outer border of the board."
                }), React.createElement(Board.make, {
                  lines: match$2[0],
                  nodes: match$1[0],
                  transitions: match$5[0],
                  line_select: c,
                  onClick: onClick,
                  key: String(c)
                }));
}

var make = App;

export {
  $$Response ,
  make ,
}
/*  Not a pure module */
